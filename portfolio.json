{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "HTTPS Node.js-Webseite mit Let’s Encrypt, EC2, Auto-Recovery und DNS",
  "Parameters": {
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "SSH-Schlüssel"
    },
    "DomainName": {
      "Type": "String",
      "Description": "FQDN für HTTPS-Zertifikat"
    },
    "EmailAddress": {
      "Type": "String",
      "Description": "E-Mail für Let's Encrypt"
    },
    "HostedZoneId": {
      "Type": "String",
      "Description": "Route53 HostedZone-ID"
    },
    "SSHAccessCidr": {
      "Type": "String",
      "Default": "0.0.0.0/0",
      "Description": "CIDR für SSH-Zugriff"
    },
     "ImageId": {
      "Type": "AWS::EC2::Image::Id",
      "Description": "AMI-ID der Debian-Instanz (aktuellste manuell angegeben)"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": { "Fn::Select": [ 0, { "Fn::GetAZs": "" } ] }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": { "VpcId": { "Ref": "VPC" } }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },
    "RouteAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "HTTP/HTTPS/SSH Access",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "CidrIp": { "Ref": "SSHAccessCidr" } },
          { "IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "CidrIp": "0.0.0.0/0" }
        ]
      }
    },
    "MyEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t2.micro",
        "ImageId": { "Ref": "ImageId" },
        "SubnetId": { "Ref": "Subnet" },
        "SecurityGroupIds": [ { "Ref": "SecurityGroup" } ],
        "KeyName": "portfolio-key-pair",
        "UserData": {
          "Fn::Base64": {
            "Fn::Sub": "#!/bin/bash\napt update -y\napt install -y curl software-properties-common apt-transport-https lsb-release ca-certificates gnupg\n\n# Install Node.js\napt install -y nodejs npm\n\n# Install Certbot\napt install -y certbot\n\n# Domainname für Zertifikat\nDOMAIN=eduardtoews.com\nEMAIL=e.toews@freenet.de\n\n# Zertifikat anfordern\ncertbot certonly --standalone --non-interactive --agree-tos -m $EMAIL -d $DOMAIN\n\n# Node.js App mit HTTPS starten\nmkdir -p /opt/app && cd /opt/app\nnpm init -y && npm install express\necho \"const fs = require('fs'); const https = require('https'); const express = require('express'); const app = express(); const options = { key: fs.readFileSync('/etc/letsencrypt/live/$DOMAIN/privkey.pem'), cert: fs.readFileSync('/etc/letsencrypt/live/$DOMAIN/fullchain.pem') }; app.get('/', (req, res) => res.send('Hallo Welt!')); https.createServer(options, app).listen(443);\" > server.js\n\nnohup node server.js &\nnpm install -g pm2\npm2 start server.js --name hello-app\npm2 save\npm2 startup | tail -1 | bash"
          }
        }
      }
    },
    "EC2RecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "RecoverEC2Instance",
        "MetricName": "StatusCheckFailed_System",
        "Namespace": "AWS/EC2",
        "Statistic": "Minimum",
        "Period": 60,
        "EvaluationPeriods": 2,
        "Threshold": 1,
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": { "Ref": "MyEC2Instance" }
          }
        ],
        "AlarmActions": [
          { "Fn::Sub": "arn:aws:automate:${AWS::Region}:ec2:recover" }
        ]
      }
    },
    "DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": "Z05261601FCJ1U9LF0FKW",
        "Name": "eduardtoews.com.",
        "Type": "A",
        "TTL": "300",
        "ResourceRecords": [ { "Fn::GetAtt": [ "MyEC2Instance", "PublicIp" ] } ]
      }
    }
  }
}
